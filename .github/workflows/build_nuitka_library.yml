name: Check Nuitka Compatibility

# TEMPORARILY DISABLED - uncomment the on: section below and remove workflow_dispatch to re-enable
# on:
#   push:
#     branches: [release]
#   pull_request:
#     branches: [master, release]
# workflow_dispatch allows manual triggering from GitHub Actions UI
on: workflow_dispatch

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/release' }}

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.13']
        os: [windows-latest, ubuntu-latest, macos-15-intel, macos-latest]
        architecture: ['x86', 'x64']
        exclude:
          # no python builds available on macos 32 bit, arm or x64
          - os: macos-latest
            architecture: x86
          - os: macos-15-intel
            architecture: x86
          # no python builds available on linux 32 bit
          - os: ubuntu-latest
            architecture: x86
          # scipy dropped 32 bit windows builds
          - os: windows-latest
            architecture: x86
            python-version: 3.8
          - os: windows-latest
            architecture: x86
            python-version: 3.9
          - os: windows-latest
            architecture: x86
            python-version: 3.10
          - os: windows-latest
            architecture: x86
            python-version: 3.11
          - os: windows-latest
            architecture: x86
            python-version: 3.12
          - os: windows-latest
            architecture: x86
            python-version: 3.13

          # These are arm - old versions of Python are not supported
          - os: macos-latest
            python-version: 3.8
          - os: macos-latest
            python-version: 3.9
          - os: macos-latest
            python-version: 3.10
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }} ${{ matrix.architecture }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}

    - name: cache Linux
      uses: actions/cache@v4
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_test.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ runner.architecture }}-${{ runner.python-version }}pip-
    - name: cache MacOS
      uses: actions/cache@v4
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_test.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ runner.architecture }}-${{ runner.python-version }}pip-
    - name: cache Windows
      uses: actions/cache@v4
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_test.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ runner.architecture }}-${{ runner.python-version }}pip-

    - name: Install Ubuntu dependencies
      if: startsWith(runner.os, 'Linux')
      run: |
        # Taken from scipy
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev libatlas-base-dev liblapack-dev gfortran libgmp-dev libmpfr-dev libsuitesparse-dev ccache libmpc-dev

    - name: Install dependencies
      run: |
        python -c "import platform; print(platform.platform()); print(platform.architecture())"
        python -m pip install --upgrade pip
        python -m pip install wheel
        pip install -r requirements_test.txt
        pip install nuitka
    - name: Add numba
      if: ${{ !contains(fromJSON('["pypy3.9"]'), matrix.python-version) }}
      run: |
        pip install numba
    - name: Build nuitka library
      run: |
        python -m nuitka --module chemicals --include-package=chemicals
    - name: Delete chemicals folder
      shell: bash
      run: |
          rm -rf chemicals/chemicals
    - name: Test build library can be imported
      run: |
        python -c "import chemicals; print(chemicals.__version__)"
